Perbedaan Virtual dan Container

	-   Virtual Machine berfokus tidak hanya pada aplikasi, tapi juga sistem operasi (linux, ubuntu dll) yang harus di jalankan. Di
	    mana jika dijalankan atau merestart aplikasi, akan lama karena sama saja dengan menjalankan / restart sistem operasi.
	    Di situlah keunggulan container, dimana container berfokus hanya pada aplikasi, di mana kita hanya mempackage aplikasi
	    dan dependency nya tanpa menggabungkan sistem operasi. Di mana sistem operasi sendiri sudah di atur oleh container
	    manager. Sehingga, ketika container berjalan dia otomatis menjalankan sesuai dengan sistem operasi host yang
	    menjalankan, tanpa harus menambahkan sistem operasi didalamnya.

Kenapa Container

	-   Ketika kita memakai container, aplikasi kita terisolasi satu sama lain. Jika tidak menggunakan container, kita mempunyai
	    aplikasi java dengan versi berbeda, maka sistem operasi akan bingung dan akan crash karena ada ketidak sesuaian versi,
	    maka dari itu kita memakai container, agar tidak terjadi hal semacam itu. Antar Aplikasi pun tidak terjadi crash.

Docker

	-   Docker adalah aplikasi yang mengimplementasikan container manager.

Docker arsitektur

	-   Docker adalah aplikasi Client dan Server, di mana ketika kita menginstall kita sudah mendapatkan keduanya. Keduanya
	    juga bisa berjalan di operasi sistem yang kita gunakan.

Mengecek docker

	-   Untuk memastikan docker berjalan, bisa dengan mengetik di terminal “docker version” jika server docker tidak berjalan,
	    maka akan terjadi error. Jika tidak error maka akan menampilkan client dan server yang di gunakan.

Fitur Docker

	-   Docker Registry

		*   Tempat menyimpan Docker Image yang akan di gunakan server (docker daemon).
		*   Docker daemon bisa melakukan download (jika belum ada) image di docker registry ketika docker client
		    memerintahkan, selama terhubung dengan docker registry.
		*   Letak registry ada di docker hub, Google Cloud Container Registry, dll.

	-   Docker Image

		*   Bayangkan docker image itu seperti .exe atau .apk (installer aplikasi), dimana didalamnya terdapat aplikasi dan
		    dependency dari aplikasi itu sendiri.
		*   Jika ingin menjalankan suatu aplikasi di docker, kita harus memiliki docker image dari aplikasi tersebut.
		*   Untuk melihat daftar aplikasi image yang ada di docker kita cukup mengetik di terminal : “docker image ls” ls disini
		    menggunakan L kecil bukan i besar.
		*   Jika kita ingin mendownload image dari docker registry, kita tinggal membuat perintah di terminal : “docker image
		    pull namaimage:tag”, contohnya kita ingin mendownload redis “docker image pull redis:latest”. Agar aman, untuk tag
		    bisa di isi latest. Untuk yang ingin di download bisa di cari di docker hub. Image akan di download jika belum ada di
		    server, tapi tidak akan di download jika sudah ada.
		*   Untuk menghapus docker image, gunakan perintah berikut di terminal : “docker image rm namaimage:tag”,
		    sesuaikan tag dengan yang ada di nama image, contoh ingin menghapus redis image dengan tag latest, “docker
		    image rm redis:latest”.

	-   Docker Container

		*   Docker container seperti aplikasi hasil dari installer, satu image bisa digunakan untuk membuat lebih dari 1
		    container, asalkan secara nama berbeda, misal redis, redis1, redis2 dengan image yang sama.
		*   Ketika image sudah dibuat containernya, maka kita tidak bisa menghapus image tersebut, karena container hanya
		    menggunakan isi dari image tersebut, maka jika bisa di hapus, tidak ada yang bisa digunakan.
		*   Untuk melihat semua container, yang berjalan maupun tidak, bisa menggunakan perintah ini pada terminal : “docker
		    container ls -a”.
		*   Untuk melihat container yang sedang berjalan, bisa menggunakan perintah ini pada terminal : “docker container ls”.
		*   Untuk membuat container bisa menggunakan perintah berikut : “docker container create —name namacontainer
		    namaimage:tag”, contohnya “docker container create —name rediscontainer redis:latest”
		*   Port yang ada di dalam container, hanya berjalan pada container, tidak akan bentrok dengan port yang berjalan di sistem operasi.
		    Jika di antara container menggunakan port yang sama, itu juga tidak masalah, karena memang antar container saling terisolasi.

		*   Status Container

			>   Awal ketika di buat, container tidak akan berjalan. Sehingga, container perlu di jalankan agar status nya menyala.
			>   Untuk menjalankan docker bisa dengan perintah berikut : "docker container start containerId/namacontainer" jika tidak hafal
			    containerId bisa menggunakan nama containernya saja. Misal kita mempunyai container redis1, kita jalankan dengan :
			    "docker container start redis1"
			>   Untuk menghentikan, cukup dengan perintah "docker container stop containerId/namacontainer", jika tidak hafal
                containerId bisa menggunakan nama containernya saja. Misal kita mempunyai container redis1, kita jalankan dengan :
                "docker container stop redis1"
            >   Untuk menghapus container, kita harus menghentikan container tersebut terlebih dahulu, dan untuk menghapusnya cukup
                dengan perintah : "docker container rm containerId/containername", jika tidak hafal containerId bisa menggunakan nama containernya saja.
                Misal kita mempunyai container redis1, kita jalankan dengan : "docker container rm redis1"

        *   Container Log

            >   Untuk mempermudah menemukan akar dari masalah, terkadang kita memerlukan log aktifitas kejadian, di docker container
                sendiri, menyediakan aktifitas berupa log di container log.
            >   Untuk melihat log aplikasi container, bisa dengan perintah : "docker container logs containerId/containername",
                contoh : "docker container logs redis1".
            >   Untuk melihat log secara realtime, bisa dengan perintah : "docker container logs -f containerId/containername",
                contoh : "docker container logs -f redis1"

        *   Container Exec

            >   Untuk menjalankan aplikasi yang ada di dalam container, kita perlu mengeksekusinya di dalam containernya juga.
                Untuk menjalankan hal tersebut kita bisa menggunakan fitur container yaitu container exec.
                Hal ini di lakukan karena untuk menjalankan aplikasi, perlu masuk ke dalam container tersebut.
            >   Kita bisa menjalankan perintah berikut untuk menjalankan aplikasi : “docker container exec -i -t containerId/containername /bin/bash

                    *   -i artinya input akan aktif ketika mengakses aplikasi, dan ini sifatnya wajib di gunakan.
                    *   -t artinya kita akan menggunakan terminal sebagai akses ke aplikasi, dimana ini juga wajib untuk digunakan.
                    *   /bin/bash adalah contoh kode program yang ada di dalam container. Biasanya menggunakan Linux / Unix sehingga terdapat bin/bash yang akan kita eksekusi.
                        Contoh dari penggunaan perintah diatas adalah sebagai berikut : “docker container exec -i -t redis1 /bin/bash
                        Setelah melakukan operasi di atas, kita akan masuk ke dalam bash aplikasi, dimana kita bisa memasukkan perintah apapun.
                        Untuk contohnya kita bisa menggunakan perintah cd / untuk ke root. Lalu ls untuk melihat ada list apa saja di dalam root.
                        Lalu mengetik redis-cli untuk melakukan operasi redis yang biasa di lakukan dengan terminal.
                        Dan kita bisa typing exit untuk keluar dari container.

        *   Container Port

            >   Kita tidak bisa mengeksekusi sebuah aplikasi di dalam container secara langsung, maka kita menggunakan container exec.
                Di dalam aplikasi yang ada di container terdapat port, yang kita bisa lihat dengan perintah docker container ls.
                Seperti yang kita ketahui, port yang ada di dalam container, bukan lah port yang ada di sistem operasi kita,
                jika kita membuka localhost dengan port seperti container, maka tidak akan terjadi apapun.
                Untuk itu ada fitur port forwarding, dimana kita membuka port yang ada di laptop kita (localhost)
                untuk memberikan akses ke port yang ada di container. Semisal kira membuka port 1234 di laptop kita,
                untuk mengakses port container 80. Setelah melakukan hal ini, kita akan bisa mengakses container dengan
                localhost di tambah port yang ada di laptop kita.
            >   Untuk melakukan port forwarding ini, kita harus membuat ulang container, atau membuat container baru,
                karena tidak bisa melakukan setelah container sudah terbuat. Untuk melakukan port forwarding, kita bisa
                menggunakan perintah berikut : "docker container create --name containername -- publish laptopport:containerport image:tag".
                Contohnya : "docker container create --name nginx1 --publish 8080:80 nginx:latest".
                Tantangannya adalah kita harus tau port yang di gunakan oleh aplikasi tersebut.
                Untuk mengetahui, bisa menggunakan cara membuat dulu, lalu melihat portnya, menghapus dan membuat baru dengan port forwarding.
                Apabila port nya kita tidak tau, maka percuma karena port laptop kita ketika diakses, tidak akan membuka aplikasi di container.

        *   Container Enviroment Variable

            >   Enviroment variable adalah salah satu teknik agar konfigurasi aplikasi bisa di rubah secara dinamis, contohnya
                seperti user dan password pada DB. Dengan adanya teknik ini, kita bisa mengubah konfigurasi aplikasi tanpa harus
                mengubahnya di dalam aplikasi, contohnya seperti hard code username password DB di aplikasinya langsung.
            >   Untuk menambah enviroment variable, docker mempunyai perintah sebagai berikut : "docker container create --name
                containername --env KEY="value" --env KEY2="value" image:tag", jika kita hanya butuh 1 env key yang diberikan hanya 1,
                jika lebih, tinggal disesuaikan key2, key3 dst. Contohnya kita akan menggunakan monggodb, biasanya dibagian description
                dari image, terdapat key yang bisa digunakan, jika di monggo ada MONGO_INITDB_ROOT_USERNAME dan MONGO_INITDB_ROOT_PASSWORD
                untuk key username dan password. Berikut contoh penggunaannya : "docker container create --name mongo1 --publish 27017:27017
                --env MONGO_INITDB_ROOT_USERNAME=fin --env MONGO_INITDB_ROOT_PASSWORD=fin mongo:latest". Kita tidak bisa mengubah enviroment
                yang sudah diberikan, jika ingin merubah, maka bisa membuat baru container dengan enviroment yang berbeda.

        *   Container Stats

            >   Ketika kita menggunakan docker dan menjalankan beberapa container, penggunaan resources seperti CPU dan Memory hanya terlihat
                untuk docker saja. Kita tidak tau detail container mana yang memakan resource banyak ketika menggunakan monitor aktifitas (mac)
                atau task manager (windows). Untuk menyelesaikan masalah tersebut, ada perintah yang bisa di jalankan,
                yaitu : "docker container stats".

        *   Container Resource Limit

            >   Untuk di linux, ketika kita membuat container, container tersebut akan menggunakan semua cpu dan memory yang tersedia
                di host. Sedangkan jika di Mac atau Windows dia akan menggunakan semua memory dan cpu yang sudah di berikan sistem, 100%
                dari 20% resources yang diberikan. Jika terjadi kesalahan yang menyebabkan penggunaan resource berlebih, hal ini bisa
                berdampak bukan hanya ke container yang lain, tetapi juga sistem host yang digunakan. Untuk itu diperlukan resource limit
                ketika kita membuat container.
            >   Kita tinggal menambahkan "--memory" untuk mengatur limit memory, sedangkan untuk cpu, bisa menggunakan "--cpus".
                Untuk contohnya seperti berikut : "docker container create --name smallnginx --publish 8081:80 --memory 100m --cpus 0.5
                nginx:latest". "100m" di contoh mengartikan 100 mega byte, sedangkan jika kita ingin memberikan 1 giga, kita tinggal menambahkan
                menggunakan "g", misal "1g". Sedangkan untuk cpu, kita menggunakan titik untuk pengaturannya, bisa dari 0.1 core sampai core
                dari cpu yang kita kehendaki.

        *   Bind Mounts

            >   Bind mounts adalah kemampuan untuk melakukan sharing file atau foleder yang terdapat di sistem host ke container
                yang ada di docker. Fitur ini berguna ketika kita ingin mengirim konfigurasi dari luar kontainer, semisal menyimpan
                data yang dibuat di aplikasi container ke dalam folder di sistem host. Jika file atau folder tersebut tidak ada di
                sistem host, maka otomatis akan dibuatkan oleh docker.
            >   Kita bisa menambahkan instruksi "--mount" pada saat membuat container untuk menambahkan kemampuan sharing ini.
                Namun mount ini mempunyai aturan parameter, ada 4 parameter saat menggunakan mount.

                    *   type : untuk type, di isi oleh tipe mount. Apakah bind atau volume.
                    *   source : source ini adalah parameter yang menentukan lokasi file atau folder di sistem host.
                    *   destination : untuk parameter ini digunakan untuk menentukan lokasi file atau folder di container.
                    *   readonly : jika digunakan, maka file atau folder hanya bisa dibaca di container, tidak bisa ditulis.

            >   Perintah untuk melakukan mounting menjadi sebagai berikut : "docker container create --name containername --mount
                "type=bind,source=folder(yang ada di sistem host),destination=folder(yang ada di container),readonly(jika ingin
                folder dibaca saja, jika tidak bisa tidak ditulis)"(menggunakan tanda petik agar lebih mudah saja) image:tag".
                Contoh : "docker container create --name mongodata --mount "type=bind,source=/Users/khannedy/mongo-data,
                destination=/data/db" --publish 27018:27017 --env MONGO_INITDB_ROOT_USERNAME=fin --env MONGO_INITDB_ROOT_PASSWORD=fin mongo:latest"

        *   Docker Volume

            >   Untuk versi terkini disarankan untuk meninggalkan bind mounts dan menggunakan docker volume untuk melakukan hal yang sama.
            >   Untuk docker volume sendiri mempunyai kelebihan lain, yaitu bisa digunakan untuk memanipulasi (membuat volume,
                melihat daftar volume dan menghapus volume) storage / volume yang ada di docker. Untuk penyimpanan pun berbeda,
                jika di bind mounts penyimpanan di lakukan di penyimpanan host, untuk docker volume diatur oleh docker.
            >   Selama kita membuat container sekarang, otomatis data dari container tersebut disimpan di dalam volume. Sehingga kita akan menemukan banyak volume terbuat meskipun kita belum pernah membuatnya. Untuk melihat docker volume sendiri bisa menggunakan perintah : “docker volume ls”
            >   Untuk membuat docker volume kita bisa menggunakan perintah : “docker volume create namavolume”. Contoh : “docker volume create redisvolume”.
            >   Kita bisa menghapus volume yang tidak digunakan oleh container. Jika volume masih digunakan oleh container, maka volume tersebut tidak bisa kita hapus. Perintah untuk menghapus volume adalah : “docker volume rm namavolume”. Contohnya : “docker volume rm redisvolume”.

        *   Container Volume

            >   Jika kita membuat volume sendiri, kita bisa menghubungkannya dengan container. Keuntungannya adalah jika
                kita menghapus container yang dihubungkan, data yang ada di volume akan tetap aman.
            >   Kita bisa menggunakan --mount untuk menghubungkan container dengan volume, namun untuk type nya kita menggunakan volume,
                dan untuk source nya menggunakan nama yang sudah kita buat. Untuk destinationnya masih menggunakan folder yang ada di container.
            >   Perintah yang digunakan : "docker container create --name containername --mount "type=volume,source=nama volume(yang sudah dibuat),
                destination=folder(yang ada di container),readonly(jika ingin folder dibaca saja, jika tidak bisa tidak ditulis)"(menggunakan tanda petik agar lebih mudah saja) image:tag".
                Contoh : "docker container create --name mongocontainer --mount "type=volume,source=mongovolume(kita buat terlebih dahulu dengan
                “docker volume create mongovolume”,destination=/data/db" --publish 27018:27017 --env MONGO_INITDB_ROOT_USERNAME=fin --env MONGO_INITDB_ROOT_PASSWORD=fin mongo:latest"

        *   Backup Volume

            >   Untuk saat ini belum ada cara otomatis untuk membackup volume. Untuk melakukan backup,
                kita bisa menggunakan container untuk membackup volume dengan cara merubah ke dalam archieve seperti zip atau tar.gz.
            >   Tahapan melakukan backup:

                *   Matikan container yang ingin kita backup volumenya. Contoh perintah : “docker container stop mongocontainer”.
                *   Buat container dengan 2 mount, mount yang pertama mount dengan type bind mount ke folder host,
                    dan mount yang kedua type volume yang ingin kita backup. Sebenarnya kita hanya butuh container, jadi kita bebas
                    menggunakan image apapun, seperti contoh : "docker container create --name nginxbackup --mount "type=bind,
                    source=/Users/khannedy/backup,destination=/backup" --mount "type=volume,source=mongocontainer,destination=/data" nginx:latest"
                *   Jalankan container dan masuk ke dalam terminal container untuk melakukan archieve isi volume dan simpan di bind mount folder.
                    Contoh : "docker container start nginxbackup", lalu "docker container exec -i -t nginxbackup /bin/bash",
                    lalu gunakan aplikasi tar "tar cvf /backup/backup.tar.gz /data" (artinya gunakan aplikasi tar untuk copy paste dari
                    folder /data ke folder /backup di simpan dalam bentuk file backup.tar.gz), tunggu sampai proses selesai, ditandai
                    dengan terminal bisa menerima perintah lagi, lalu kita exit ke proses selanjutnya : "exit".
                *   Setelah data backup ada di bind mount folder, matikan container backup dan delete container tersebut,
                    lalu jalankan kembali container yang sebelumnya kita matikan. Contoh : "docker container stop nginxbackup",
                    lalu "docker container rm nginxbackup", lalu "docker container start mongocontainer".

            >   Tahapan backup secara langsung dengan menggunakan perintah run:

                *   Matikan container yang ingin kita backup volumenya. Contoh perintah : “docker container stop mongocontainer”.
                *   Jalankan perintah langsung (membuat, membackup, menghapus container) menggunakan run. Contoh : "
                    docker container run --rm --name ubuntubackup --mount "type=bind,source=/Users/khannedy/backup,destination=/backup"
                    --mount "type=volume,source=mongocontainer,destination=/data" ubuntu:latest tar cvf /backup/backup.tar.gz /data".
                    Menggunakan ubuntu disini karena nginx tidak pernah berhenti, sedangkan ubuntu hanya sekali eksekusi langsung selesai.
                *   Jalankan kembali container yang sebelumnya kita matikan. Contoh : "docker container start mongocontainer".

        *   Restore Volume

            >   Kita bisa mengembalikan data yang kita backup dari penyimpanan seperti cloud ke volume baru, dan juga kita bisa memastikan
                apakah file backup tersebut corrupt atau tidak.
            >   Tahapan melakukan restore :

                *   Buat volume baru untuk lokasi restore data backup. Contoh : "docker volume create mongodatarestore".
                *   Buat container baru dengan dua mount (seperti kita membackup), dimana ada type volume untuk restore backup,
                    dan bind mount folder dari sistem host yang berisi file backup. Contoh : "docker container create --name nginxbackup --mount "type=bind,
                    source=/Users/khannedy/backup,destination=/backup" --mount "type=volume,source=mongodatarestore,destination=/data" nginx:latest"
                *   Dari container tadi, masuk dan jalankan perintah melalui terminal untuk melakukan restore dengan cara
                    mengekstrak isi backup file ke dalam volume yang tadi kita buat. Contoh : "docker container start mongodatabackup",
                    lalu "docker container exec -i -t mongodatabackup /bin/bash",lalu gunakan perintah untuk masuk ke file data "cd /data",
                    lalu jalankan "tar xvf /backup/backup.tar.gz --strip 1" (artinya gunakan aplikasi tar untuk ekstrak dari file tar ke folder /data ),
                    tunggu sampai proses selesai, ditandai dengan terminal bisa menerima perintah lagi, lalu kita exit ke proses selanjutnya : "exit".
                *   Setelah file backup sudah terisi ke volume, lalu delete container yang tadi kita gunakan untuk melakukan
                    restore. Contoh : "docker container stop nginxbackup",lalu "docker container rm nginxbackup".
                *   Volume yang terisi data backup siap digunakan untuk container baru.

            >   Tahapan melakukan restore secara langsung dengan perintah run :

                *   Buat volume baru untuk lokasi restore data backup. Contoh : "docker volume create mongodatarestore".
                *   Jalankan perintah langsung (membuat, membackup, menghapus container) menggunakan run. Contoh : "
                    docker container run --rm --name ubuntu --mount "type=bind,source=/Users/khannedy/backup,destination=/backup"
                    --mount "type=volume,source=mongodatarestore,destination=/data" ubuntu:latest bash -c "cd /data && tar xvf /backup/backup.tar.gz --strip 1"".
                *   Volume yang terisi data backup siap digunakan untuk container baru. Contoh : "docker container create --name mongocontainerrestore --mount "type=volume,
                    source=mongorestore,destination=/data/db" --publish 27018:27017 --env MONGO_INITDB_ROOT_USERNAME=fin --env MONGO_INITDB_ROOT_PASSWORD=fin mongo:latest".

        *   Docker Network

            >   Kita mengerti jika antar container itu terisolasi, sehingga jika kita memanggil container lain di dalam container
                tidak akan berhasil. Untuk itulah docker memiliki fitur network, dimana fitur ini bisa memungkinkan antar container
                saling berkomunikasi jika dalam satu network yang sama. Sama seperti container, di docker pun fitur network bisa
                di atur (dilihat, dibuat dan juga di hapus).
            >   Saat membuat network di docker, kita perlu menentukan driver mana yang harus di gunakan. Dikarenakan antar driver
                yang ada, terdapat syarat driver tersebut bisa kita gunakan. Berikut driver yang ada dan ketiga driver di bawah ini
                otomatis ada di dalam docker:

                *   None, ini adalah driver yang pasti digunakan saat kita membuat container, default. Di karenakan jika menggunakan
                    driver ini maka tidak akan bisa berkomunikasi.
                *   Bridge, driver yang digunakan untuk membuat network dimana jika container memakai bridge network yang sama, maka
                    antar container tersebut akan bisa saling komunikasi.
                *   Host, jenis driver ini hanya akan berjalan pada docker linux. Tipe driver ini akan membuat network yang sama
                    yang dipakai sistem host.

            >   Untuk melihat network yang ada di docker, kita bisa gunakan perintah : "docker network ls".
            >   Untuk membuat network baru, kita bisa menggunakan perintah : "docker network create --driver namadriver namanetwork".
                Jika kita tidak menggunakan --driver, maka driver yang dibuat akan otomatis berjenis bridge. Contoh : "docker
                network create --driver bridge contohnetwork".
            >   Ketika ingin menghapus network, pastikan network tersebut belum di gunakan oleh container. Jika sudah digunakan container,
                maka container tersebut harus di hapus terlebih dahulu, setelah itu baru bisa menghapus network. Untuk perintah
                menghapus network adalah : "docker network rm namanetwork". Contoh : "docker network rm contohnetwork".

        *   Container Network

            >